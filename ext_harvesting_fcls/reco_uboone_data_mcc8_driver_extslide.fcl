## 
##  Shared art job configuartions for MCC8 uboone reco
##
#include "services_microboone.fcl"
#include "time_memory_tracker_microboone.fcl"
#include "swtrigger_microboone.fcl"
#include "reco_uboone_data_mcc8.fcl"

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { }
  TimeTracker:             @local::microboone_time_tracker
  MemoryTracker:           @local::microboone_memory_tracker
  RandomNumberGenerator:   {} #ART native random number generator
  message:                 @local::microboone_message_services_prod_debug
  FileCatalogMetadata:     @local::art_file_catalog_data
  @table::microboone_reco_data_services
}

process_name: DataRecoEXTSlidingFilter
services.DatabaseUtil.ShouldConnect: false

#source is a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
  saveMemoryObjectThreshold: 0
  inputCommands: ["keep *_*_*_*", "drop *_*_*_Data*Reco*" ]
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
  @table::microboone_reco_data_producers
 }

 filters:
 { 
   swtrigger0: @local::microboone_swtrigger_data_ext_slide0
   swtrigger1: @local::microboone_swtrigger_data_ext_slide1
   swtrigger2: @local::microboone_swtrigger_data_ext_slide2
   swtrigger3: @local::microboone_swtrigger_data_ext_slide3
   swtrigger4: @local::microboone_swtrigger_data_ext_slide4
   swtrigger5: @local::microboone_swtrigger_data_ext_slide5
   swtrigger6: @local::microboone_swtrigger_data_ext_slide6
   swtrigger7: @local::microboone_swtrigger_data_ext_slide7
   swtrigger8: @local::microboone_swtrigger_data_ext_slide8

   opfilter0: @local::microboone_common_op_precut_ext
   opfilter1: @local::microboone_common_op_precut_ext_slide1
   opfilter2: @local::microboone_common_op_precut_ext_slide2
   opfilter3: @local::microboone_common_op_precut_ext_slide3
   opfilter4: @local::microboone_common_op_precut_ext_slide4
   opfilter5: @local::microboone_common_op_precut_ext_slide5
   opfilter6: @local::microboone_common_op_precut_ext_slide6
   opfilter7: @local::microboone_common_op_precut_ext_slide7
   opfilter8: @local::microboone_common_op_precut_ext_slide8
 }

 analyzers:
 {
   opfilterana0: {
     module_type: "UbooneOpticalFilterAna"
     InputTag: "opfilter0"
   }
   opfilterana1: {
     module_type: "UbooneOpticalFilterAna"
     InputTag: "opfilter1"
   }
   opfilterana2: {
     module_type: "UbooneOpticalFilterAna"
     InputTag: "opfilter2"
   }
   opfilterana3: {
     module_type: "UbooneOpticalFilterAna"
     InputTag: "opfilter3"
   }
   opfilterana4: {
     module_type: "UbooneOpticalFilterAna"
     InputTag: "opfilter4"
   }
   opfilterana5: {
     module_type: "UbooneOpticalFilterAna"
     InputTag: "opfilter5"
   }
   opfilterana6: {
     module_type: "UbooneOpticalFilterAna"
     InputTag: "opfilter6"
   }
   opfilterana7: {
     module_type: "UbooneOpticalFilterAna"
     InputTag: "opfilter7"
   }
   opfilterana8: {
     module_type: "UbooneOpticalFilterAna"
     InputTag: "opfilter8"
   }
 }

 #reco sequence and trigger_paths to be defined elsewhere

 ext_filter_slide0: [swtrigger0, @sequence::microboone_reco_data_optical, opfilter0]
 ext_filter_slide1: [swtrigger1, @sequence::microboone_reco_data_optical, opfilter1]
 ext_filter_slide2: [swtrigger2, @sequence::microboone_reco_data_optical, opfilter2]
 ext_filter_slide3: [swtrigger3, @sequence::microboone_reco_data_optical, opfilter3]
 ext_filter_slide4: [swtrigger4, @sequence::microboone_reco_data_optical, opfilter4]
 ext_filter_slide5: [swtrigger5, @sequence::microboone_reco_data_optical, opfilter5]
 ext_filter_slide6: [swtrigger6, @sequence::microboone_reco_data_optical, opfilter6]
 ext_filter_slide7: [swtrigger7, @sequence::microboone_reco_data_optical, opfilter7]
 ext_filter_slide8: [swtrigger8, @sequence::microboone_reco_data_optical, opfilter8]

 ext_filter_slide0_f: [swtrigger0, @sequence::microboone_reco_data_optical, "!opfilter0"]
 ext_filter_slide1_f: [swtrigger1, @sequence::microboone_reco_data_optical, "!opfilter1"]
 ext_filter_slide2_f: [swtrigger2, @sequence::microboone_reco_data_optical, "!opfilter2"]
 ext_filter_slide3_f: [swtrigger3, @sequence::microboone_reco_data_optical, "!opfilter3"]
 ext_filter_slide4_f: [swtrigger4, @sequence::microboone_reco_data_optical, "!opfilter4"]
 ext_filter_slide5_f: [swtrigger5, @sequence::microboone_reco_data_optical, "!opfilter5"]
 ext_filter_slide6_f: [swtrigger6, @sequence::microboone_reco_data_optical, "!opfilter6"]
 ext_filter_slide7_f: [swtrigger7, @sequence::microboone_reco_data_optical, "!opfilter7"]
 ext_filter_slide8_f: [swtrigger8, @sequence::microboone_reco_data_optical, "!opfilter8"]

 trigger_paths: [ ext_filter_slide0,
                  ext_filter_slide1,
                  ext_filter_slide2,
                  ext_filter_slide3,
                  ext_filter_slide4,
                  ext_filter_slide5,
                  ext_filter_slide6,
                  ext_filter_slide7,
                  ext_filter_slide8,
                  ext_filter_slide0_f,
                  ext_filter_slide1_f,
                  ext_filter_slide2_f,
                  ext_filter_slide3_f,
                  ext_filter_slide4_f,
                  ext_filter_slide5_f,
                  ext_filter_slide6_f,
                  ext_filter_slide7_f,
                  ext_filter_slide8_f
                ]
 ostream:  [ out0,out1,out2,out3,out4,out5,out6,out7,out8 ]
 ana: [ opfilterana0, 
        opfilterana1, 
        opfilterana2, 
        opfilterana3, 
        opfilterana4, 
        opfilterana5, 
        opfilterana6,
        opfilterana7,
        opfilterana8 ]
 end_paths:     [ ostream, ana ]  

}

physics.analyzers.opfilterana0.SelectEvents: [ ext_filter_slide0,ext_filter_slide0_f ]
physics.analyzers.opfilterana1.SelectEvents: [ ext_filter_slide1,ext_filter_slide1_f ]
physics.analyzers.opfilterana2.SelectEvents: [ ext_filter_slide2,ext_filter_slide2_f ]
physics.analyzers.opfilterana3.SelectEvents: [ ext_filter_slide3,ext_filter_slide3_f ]
physics.analyzers.opfilterana4.SelectEvents: [ ext_filter_slide4,ext_filter_slide4_f ]
physics.analyzers.opfilterana5.SelectEvents: [ ext_filter_slide5,ext_filter_slide5_f ]
physics.analyzers.opfilterana6.SelectEvents: [ ext_filter_slide6,ext_filter_slide6_f ]
physics.analyzers.opfilterana7.SelectEvents: [ ext_filter_slide7,ext_filter_slide7_f ]
physics.analyzers.opfilterana8.SelectEvents: [ ext_filter_slide8,ext_filter_slide8_f ]

physics.filters.opfilter0.OpHitProducer: "ophitBeam"
physics.filters.opfilter1.OpHitProducer: "ophitBeam"
physics.filters.opfilter2.OpHitProducer: "ophitBeam"
physics.filters.opfilter3.OpHitProducer: "ophitBeam"
physics.filters.opfilter4.OpHitProducer: "ophitBeam"
physics.filters.opfilter5.OpHitProducer: "ophitBeam"
physics.filters.opfilter6.OpHitProducer: "ophitBeam"
physics.filters.opfilter7.OpHitProducer: "ophitBeam"
physics.filters.opfilter8.OpHitProducer: "ophitBeam"

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out:
 {
   module_type: RootOutput
   dataTier: "reconstructed"
   compressionLevel: 1
   saveMemoryObjectThreshold: 0
   fileName: "extslide_%l_%tc.root"
 }
}

outputs.out0: @local::outputs.out
outputs.out1: @local::outputs.out
outputs.out2: @local::outputs.out
outputs.out3: @local::outputs.out
outputs.out4: @local::outputs.out
outputs.out5: @local::outputs.out
outputs.out6: @local::outputs.out
outputs.out7: @local::outputs.out
outputs.out8: @local::outputs.out

outputs.out0.SelectEvents: [ "ext_filter_slide0" ]
outputs.out1.SelectEvents: [ "ext_filter_slide1" ]
outputs.out2.SelectEvents: [ "ext_filter_slide2" ]
outputs.out3.SelectEvents: [ "ext_filter_slide3" ]
outputs.out4.SelectEvents: [ "ext_filter_slide4" ]
outputs.out5.SelectEvents: [ "ext_filter_slide5" ]
outputs.out6.SelectEvents: [ "ext_filter_slide6" ]
outputs.out7.SelectEvents: [ "ext_filter_slide7" ]
outputs.out8.SelectEvents: [ "ext_filter_slide8" ]

### Here we try to suppress known and pointless messages
services.message.destinations :
{
  STDCOUT: 
  {
     type:      "cout"      #tells the message service to output this destination to cout
     threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
     categories:
     {
       ChannelFilter:
       {
         limit: 0
         reportEvery: 0
       }
       TrackStitcher:
       {
         limit: 0
         reportEvery: 0
       }
       CRHitRemoval:
       {
         limit: 0
         reportEvery: 0
       }
       default:
       {
         limit: -1  #don't print anything at the infomsg level except the explicitly named categories
         reportEvery: 1
       }
     }
  }
}

services.TFileService.fileName: "opfilterana.root"

microboone_tfile_metadata:
{
  JSONFileName:          "opfilterana.root.json"
  GenerateTFileMetadata: true
  dataTier:              "root-tuple"
  fileFormat:            "root"
}
